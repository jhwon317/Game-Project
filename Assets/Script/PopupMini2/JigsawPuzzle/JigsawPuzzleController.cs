using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using System.Linq;
using System;
using UnityEngine.SceneManagement;

public class JigsawPuzzleController : MonoBehaviour
{
    public GameObject piecePrefab;
    public Sprite[] slicedSprites;
    public Transform puzzleFrame;
    public Transform piecesContainer;

    // [새로 추가!] 격자 선으로 쓸 이미지
    public Sprite gridSprite;

    // [새로 추가!] 퍼즐이 끝났다고 알려줄 이벤트
    public event Action OnPuzzleSolved;

    private int piecesCorrect = 0;

    void Start()
    {
        GenerateAndShufflePieces();
    }

    void GenerateAndShufflePieces()
    {
        // 9개의 정답 위치(슬롯)를 'UI용 오브젝트'로 제대로 만듦
        for (int i = 0; i < slicedSprites.Length; i++)
        {
            GameObject slot = new GameObject($"Slot_{i}");
            slot.transform.SetParent(puzzleFrame, false);
            slot.AddComponent<RectTransform>(); // UI 부품이라고 알려줌!

            // 슬롯에 옅은 정답 이미지를 추가
            Image slotImage = slot.AddComponent<Image>();
            slotImage.sprite = gridSprite;
            slotImage.color = new Color(1f, 1f, 1f, 0.2f); // 아주 희미하게 (투명도 20%)
            slotImage.raycastTarget = false; // 클릭을 방해하지 않도록 설정!
        }

        // 9개의 조각을 '순서대로' 먼저 생성해서 짝을 맺어줌
        List<GameObject> pieces = new List<GameObject>();
        for (int i = 0; i < slicedSprites.Length; i++)
        {
            GameObject newPiece = Instantiate(piecePrefab, piecesContainer);
            newPiece.name = $"Piece_{i}";
            newPiece.GetComponent<Image>().sprite = slicedSprites[i];
            // 조각에게 "네 정답 위치는 너랑 번호가 똑같은 저기야!" 하고 짝을 맺어줌
            newPiece.GetComponent<DraggablePiece>().correctParent = puzzleFrame.GetChild(i);
            pieces.Add(newPiece);
        }

        // 짝을 다 맺어준 다음에, 조각들의 '순서'만 섞음
        for (int i = 0; i < pieces.Count; i++)
        {
            // '유니티 도서관'의 Random이라고 정확히 알려줌
            int randomIndex = UnityEngine.Random.Range(i, pieces.Count);
            pieces[i].transform.SetSiblingIndex(randomIndex);
        }

        // PiecesContainer 안에 자동으로 3x3 정렬되도록 Grid Layout Group 추가
        GridLayoutGroup containerLayout = piecesContainer.gameObject.AddComponent<GridLayoutGroup>();
        containerLayout.constraint = GridLayoutGroup.Constraint.FixedColumnCount;
        containerLayout.constraintCount = 3;
        containerLayout.cellSize = new Vector2(200, 200);
        containerLayout.spacing = new Vector2(10, 10);
    }

    public void PiecePlaced()
    {
        piecesCorrect++;
        if (piecesCorrect >= slicedSprites.Length)
        {
            Debug.Log("퍼즐 클리어!");

            // "저 다 풀었어요!" 하고 방송함
            OnPuzzleSolved?.Invoke();
        }
    }
}